var s=class{constructor(){if(s.instance)return s.instance;this.events=new Map,s.instance=this}static getInstance(){return this.instance||(this.instance=new s)}has(e){return this.events.has(e)}get(e){return this.events.get(e)}register(e){if(this.has(e))return;let t={name:e,callbacks:[]};this.events.set(e,t)}deregister(e){this.events.delete(e)}dispatch(e,t){let r=this.get(e);r&&r.callbacks.forEach(i=>i(t))}addEventListener(e,t){let r=this.get(e);r&&r.callbacks.push(t)}removeEventListener(e,t){let r=this.get(e);r&&(r.callbacks=r.callbacks.filter(i=>i!==t))}on(e,t){this.has(e)||this.register(e),this.addEventListener(e,t)}};var n=class{};var q=new s;function o(c,e="log"){return(t,...r)=>{let i=`[${c.toUpperCase()}:${e} ${t}]`;e==="log"?console.log(i,...r):console.error(i,...r)}}async function D(c,e,t){try{return await e(),null}catch(r){return["error","warning","debug"].includes(n.logger)&&t(c,r),r}}function p(c,e,t,r,i=100){return new Promise(a=>{let l=0,m=[],k=setInterval(async()=>{let f=await D(c,()=>e(l),r);f&&m.push(f),l++,(!f||l>=t)&&(clearInterval(k),a(m))},i)})}var g=new s,w=class{constructor(e){this.pendingCandidates=[];this.reveiceCandidate=e=>{p("receive-candidate",async()=>{if(!this.connection.remoteDescription){this.pendingCandidates.push(e);return}await this.connection.addIceCandidate(e)},3,this.printerror)};this.receiveAnswer=e=>{p("receive-answer",async()=>{await this.connection.setRemoteDescription(e),this.pendingCandidates.forEach(t=>this.connection.addIceCandidate(t).catch(this.printerror)),this.pendingCandidates=[]},3,this.printerror)};this.systemsend=e=>{let t=this.channels.get("system");return t?(t.send(JSON.stringify(e)),!0):(["fatal","error","warning","debug"].includes(n.logger)&&this.printerror("system-send","channel not found"),!1)};this.systemmessage=e=>{var r;let t=JSON.parse(e.data);switch(t.type){case"target":{g.dispatch("target",t);break}case"init":{let{user:i,network:a}=t;a&&(!n.network||((r=n.network)==null?void 0:r.host)===i.id)&&g.dispatch("network",a),g.dispatch("add-peer",{...i,type:this.type}),this.userinfo=i;break}case"connect":{let{target:i}=t,a={sender:i};g.dispatch("pre-add-peer",a);break}default:}};this.id=e.id,this.type=e.offer?"receiving":"calling",this.printerror=o(`PEER#${this.id}`,"error"),this.log=o(`PEER#${this.id}`),this.channels=new Map,this.setup(e)}setup(e){this.connection=new RTCPeerConnection(e.rtcConfiguration),this.connection.onicecandidate=t=>{t.candidate&&this.signal("candidate",t.candidate)},this.connection.onicecandidateerror=t=>{this.printerror("candidate",t)},this.connection.oniceconnectionstatechange=()=>{this.connection.iceConnectionState==="failed"&&this.type==="calling"?this.createOffer(!1):this.connection.iceConnectionState==="disconnected"&&g.dispatch("delete-peer",this.id)},g.on("new-data-channel",t=>this.addChannel(t.label,t.dataChannelDict)),g.on(`peer-${this.id}-candidate`,this.reveiceCandidate),g.on(`peer-${this.id}-answer`,this.receiveAnswer),g.on(`peer-${this.id}-system-send`,this.systemsend),this.connection.ondatachannel=t=>{this.setupChannel(t.channel),g.dispatch("incomming-media",{type:"data",config:{label:t.channel.label}})},this.type==="calling"?(this.createOffer(),e.channels.forEach((t,r)=>{this.addChannel(r,t)})):this.createAnswer(e.offer)}close(){this.connection.close()}get info(){return this.userinfo}createOffer(e=!0){p("create-offer",async()=>{let t;e||(t={iceRestart:!0});let r=await this.connection.createOffer(t);await this.connection.setLocalDescription(r),this.signal("offer",r)},3,this.printerror)}createAnswer(e){p("create-answer",async()=>{await this.connection.setRemoteDescription(new RTCSessionDescription(e));let t=await this.connection.createAnswer();await this.connection.setLocalDescription(t),this.signal("answer",t)},3,this.printerror)}signal(e,t){g.dispatch("send-target",{signal:e,type:"target",target:this.id,targetType:"signal",data:t,user:n.user})}onSignal(e){let{signal:t,data:r}=e;switch(t){case"candidate":{p("signal-candidate",async()=>{await this.connection.addIceCandidate(r)},3,this.printerror);break}case"answer":{D("signal-answer",async()=>{let i=new RTCSessionDescription(r);await this.connection.setRemoteDescription(i)},this.printerror);break}default:["error","debug"].includes(n.logger)&&this.printerror("signaling",`incorrect signaling type::${t}`)}}send(e,t){let r=this.channels.get(e);return r?(r.send(t),!0):(["warning","debug"].includes(n.logger)&&this.printerror("send","cant find channel",e),!1)}addChannel(e,t){if(this.channels.has(e)){["debug"].includes(n.logger)&&this.printerror("data-channel-add","duplicate channel");return}let r=this.connection.createDataChannel(e,t);this.setupChannel(r)}setupChannel(e){this.channels.get(e.label)||(e.onopen=()=>{e.label==="system"?this.systemopen():["info","debug"].includes(n.logger)&&this.log("channel-open",e.label)},e.label==="system"?e.onmessage=this.systemmessage:e.onmessage=t=>{g.dispatch(`${"peer-message"}-${e.label}`,{id:this.id,message:t.data})},e.onerror=t=>{console.error("[PEER] channel error",t)},this.channels.set(e.label,e))}systemopen(){this.systemsend({type:"init",user:n.user,network:n.network}),this.type,["info","debug"].includes(n.logger)&&this.log("connection","established")}};var x=10,L=700,b=new s,u=class{constructor(e,t){this.printerror=o("socket","error");this.log=o("socket");this.message=e=>{if(typeof e.data=="string"){let t=JSON.parse(e.data);switch(t.type){default:{b.dispatch(t.type,t);break}case"network-register-ack":case"network-update-ack":{b.dispatch("network",t.network);break}case"socket-connection-ack":{let{id:r}=t;n.user={...n.user,id:r},["info","debug"].includes(n.logger)&&this.log("welcome-id",r);break}case"error":{["error","warning","info","debug"].includes(n.logger)&&this.printerror("message",t.error);break}}}};this.error=e=>{if([WebSocket.OPEN,WebSocket.CONNECTING].includes(this.ws.readyState)){b.dispatch("error",{type:"socket",reason:"unknown"}),["error","warning","debug"].includes(n.logger)&&this.printerror("connection",e);return}this.attempts<x?(this.attempts++,setTimeout(()=>{this.setup()},(Math.sign(this.attempts)+this.attempts/x)*L)):(b.dispatch("error",{type:"socket",reason:"attempts maxed out"}),["fatal","error","warning","debug"].includes(n.logger)&&this.printerror("connection","attempts maxed out",this.attempts))};this.open=()=>{for(["info","debug"].includes(n.logger)&&this.log("connection","established"),this.attempts=0;this.offline.length>0;){let e=this.offline.pop();if(e){this.send(e);return}}b.dispatch("socket-open")};this.attempts=0,this.offline=[],this.protocols=t,this.url=e,this.setup()}get offlineCount(){return this.offline.length}get status(){return this.ws.readyState}setup(){this.close(),this.ws=new window.WebSocket(this.url,this.protocols),this.ws.onmessage=this.message,this.ws.onerror=this.error,this.ws.onopen=this.open,this.ws.onclose=()=>{["info","debug"].includes(n.logger)&&this.log("connection","closed")}}reconnect(){this.attempts=0,this.setup()}send(e){let t=JSON.stringify(e);if(this.ws.readyState===WebSocket.OPEN){for(this.ws.send(t);this.offline.length>0;){let r=this.offline.pop();r&&this.send(r)}return!0}return this.offline.push(e),!1}close(){this.ws&&(this.ws.onerror=null,this.ws.onmessage=null,this.ws.onopen=null,this.terminate())}terminate(e){this.ws&&(e||(this.attempts=x),this.ws.close())}};var h=new s,v=class{constructor(e){this.log=o("network");this.update=e=>{var t,r,i,a;n.network={...e,host:(r=(t=n.network)==null?void 0:t.host)!=null?r:e.host,id:(a=(i=n.network)==null?void 0:i.id)!=null?a:e.id},["info","debug"].includes(n.logger)&&this.log("update",n.network)};this.newpeer=e=>{this.router.set(e.id,{connection:[n.user.id],type:e.type}),this.router.forEach((t,r)=>{r!==e.id&&h.dispatch(`peer-${r}-system-send`,{type:"connect",target:e.id})})};this.removepeer=e=>{this.router.delete(e)};this.router=new Map,h.on("network",this.update),h.on("add-peer",this.newpeer),h.on("delete-peer",this.removepeer),e!==void 0&&(n.network={id:n.user.id,host:n.user.id,...e})}get Info(){return n.network}get password(){var e;return(e=n.network)==null?void 0:e.password}get registered(){return n.network!==void 0}forward(e){var r,i;if(this.router.get(e.target))return e.target;if(n.user.id!==((r=n.network)==null?void 0:r.host))return(i=n.network)==null?void 0:i.host}connect(e){h.dispatch("pre-add-peer",e)}join(e){if(this.router.has(e.target)){["info","debug"].includes(n.logger)&&this.log("join","we already have the connection");return}let{config:t}=e,r=this.password;!r||r===(t==null?void 0:t.password)?this.connect(e):h.dispatch("send-target",{targetType:"reject",target:e.sender})}get size(){return this.router.size}};var P=new s,T=class{constructor(){this.printerror=o("medium","error");this.streams=new Map,this.channels=new Map,P.on("incomming-media",e=>{this.add(e.type,e.config)})}async add(e,t){n.network||["warning","debug"].includes(n.logger)&&this.printerror("add","we have no network yet");try{let r;switch(e){case"audio":{r=await navigator.mediaDevices.getUserMedia({audio:!0});break}case"video":{r=await navigator.mediaDevices.getUserMedia(t);break}case"screen":{r=await navigator.mediaDevices.getDisplayMedia(t);break}case"data":{let{label:i,dataChannelDict:a}=t;this.channels.has(i)?["warning","debug"].includes(n.logger)&&this.printerror("data-channel","dupplicate"):(this.channels.set(i,a),P.dispatch("new-data-channel",t));return}default:["warning","debug"].includes(n.logger)&&this.printerror("add-media","unssuported type:",e);return}r&&this.streams.set(e,r),P.dispatch("new-stream",{type:e,stream:r})}catch(r){throw["error","debug"].includes(n.logger)&&this.printerror("add-media",r),r}}remove(e,t){e==="data"?(!t&&["warning","debug"].includes(n.logger)&&this.printerror("remove-data-channel","no label"),this.channels.delete(t)):this.streams.delete(e)}};var E=new s,I=class{constructor(e){this.peers=new Map;this.log=o("peer-manager");this.error=o("peer-manager","error");this.media=new T;this.network=e=>{if(e.host!==n.user.id||this.media.channels.has("system"))return;let t={label:"system"};this.media.add("data",t)};this.add=e=>{if(this.peers.has(e.sender)){["debug"].includes(n.logger)&&this.log("adding","dupplicate",e.sender);return}["info","debug"].includes(n.logger)&&this.log("adding",e.sender),this.peers.set(e.sender,new w({id:e.sender,rtcConfiguration:this.config,offer:e.signal==="offer"?e.data:void 0,streams:this.media.streams,channels:this.media.channels}))};this.config=e,E.on("pre-add-peer",this.add),E.on("network",this.network)}remove(e){let t=this.peers.get(e);t&&(["info","debug"].includes(n.logger)&&this.log("removing",e),t.close(),this.peers.delete(e))}signal(e){let{signal:t,data:r}=e;t==="offer"?this.add(e):E.dispatch(`peer-${e.sender}-${t}`,r)}forward(e,t){let r=this.peers.get(t);if(!r){n.logger!=="none"&&this.error("forward","not found",t);return}r.systemsend(e)}send(e,t,r){let i=this.peers.get(t);return i?i.send(e,r):(["warning","debug"].includes(n.logger)&&this.error("send","peer not found"),!1)}broadcast(e,t){this.peers.forEach(r=>{r.send(e,t)})}};var d=new s,O=class{constructor(e){this.currentState=null;this.handleError=e=>{e.type==="socket"&&(this.currentState="socket-error")};this.handleSocketOpen=()=>{this.currentState="socket-connected"};this.newConnection=e=>{var t;n.user.id!==((t=n.network)==null?void 0:t.host)&&this.socket.close()};this.sendTargetMessage=e=>{let t;e.type&&e.sender?t=e:t={...e,sender:n.user.id,type:"target"},["debug"].includes(n.logger)&&this.log("send-target-message",t),this.forward(t)||this.socket.send(t)};this.onTargetMessage=e=>{if(["debug"].includes(n.logger)&&this.log("on-target-message",e),!(e.target!==n.user.id&&this.forward(e)))switch(e.targetType){case"join":{this.network.registered?this.network.join(e):this.error("network-join","no network",e.target);break}case"reject":{this.log("join-request","we got rejected");break}case"signal":{this.manager.signal(e);break}default:{this.error("target-message","unsupported type",e.targetType);break}}};var r,i,a,l,m,k,f;this.log=o((r=e.printName)!=null?r:"P2Pclient"),this.error=o((i=e.printName)!=null?i:"P2Pclient","error"),this.network=new v(e.network),n.logger=e.logLevel||"none",this.set("user",e.user||{}),d.on("target",this.onTargetMessage),d.on("send-target",this.sendTargetMessage),d.on("add-peer",this.newConnection),d.on("error",this.handleError),d.on("socket-open",this.handleSocketOpen),this.forbiddenEvents=(a=e.forbiddenEvents)!=null?a:[],this.manager=new I((l=e.rtcConfiguration)!=null?l:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun1.l.google.com:19302"}]});let t=((k=e.server)!=null?k:!((m=e.socket)!=null&&m.url))?"https://render-webrtc-signal-server.onrender.com":void 0;if(this.currentState="loading",t)p("server-connection",async C=>{this.log("server-connection","trying to connect",{attempts:C});let M=await(await fetch(t+"/network")).json();if(!Array.isArray(M))throw new Error("response is not of array")},10,this.error,3e3).then(()=>{var C,S,M;this.socket=new u((S=(C=e.socket)==null?void 0:C.url)!=null?S:t,(M=e.socket)==null?void 0:M.protocols)});else if((f=e.socket)!=null&&f.url)this.socket=new u(e.socket.url,e.socket.protocols);else throw new Error("[P2Pclient] must have either socker.url or server in settings")}get info(){return{user:n.user,logger:n.logger,network:n.network}}get id(){return n.user.id}get host(){var e;return(e=n.network)==null?void 0:e.host}get state(){return this.currentState}getPeerInfo(e){var t;return(t=this.manager.peers.get(e))==null?void 0:t.info}send(e,t,r){let i=r instanceof Object?JSON.stringify(r):r;e==="system"?this.error("send","forbidden channel"):this.manager.send(e,t,i)}broadcast(e,t){let r=t instanceof Object?JSON.stringify(t):t;e==="system"?this.error("send","forbidden channel"):this.manager.broadcast(e,r)}on(e,t){this.forbiddenEvents.includes(e)||d.on(e,t)}onMessage(e,t){d.on(`${"peer-message"}-${e}`,t)}register(e){["info","debug"].includes(n.logger)&&this.log("register",e),this.socket.send({type:"network-register",network:e})}join(e,t){this.sendTargetMessage({target:e,targetType:"join",config:t})}set(e,t){switch(e){case"user":{n.user?n.user={...t||{},id:n.user.id}:n.user=t,["info","debug"].includes(n.logger)&&this.log("userinfo",n.user);break}case"network":{d.dispatch("network",t);break}case"media":{let r="data",i;typeof t=="object"?("type"in t&&(r=t.type),"config"in t&&(i=t.config)):typeof t=="string"&&(["audio","data","screen","video"].includes(t)?r=t:i={label:t}),this.manager.media.add(r,i);break}default:["warning","info","debug"].includes(n.logger)&&this.error("set","unssuported type",e)}}forward(e){if(this.network.registered){let t=this.network.forward(e);if(t!==void 0)return this.manager.forward(e,t),!0;["error","warning","debug"].includes(n.logger)&&this.error("forward","not found",e.target)}return!1}};export{O as P2Pclient,w as Peer,s as Reactor,u as Socket};
